<index-riot>
    <nav class="left" style="z-index:100;">
        <button class="square round extra">
            <i>search</i>
        </button>
        <a each={ page in state.routes.pages }>
            <i>{ page.icon }</i>
            <div>{ page.name }</div>
        </a>
        <a onmouseover={ () => showDrawer('components') } onmouseout={ hideDrawer }>
            <i>add_circle</i>
            <div>Components</div>
        </a>
        <a onmouseover={ () => showDrawer('examples') } onmouseout={ hideDrawer }>
            <i>apps</i>
            <div>RiotJS Examples</div>
        </a>
    </nav>
    <main class="responsive" style="padding:20px;">
        <router>
            <route each={ page in state.routes.pages  } path={ page.path }>
                <span is={ page.component }></span>
            </route>
        </router>
    </main>
    <dialog onmouseover={ showDrawer } onmouseout={ hideDrawer } class="left no-padding {state.drawer === true ? 'active' : ''}" style="z-index:99;border-left:1px solid #8080802e;margin-left:80px">
        <nav class="drawer" >
            <template if={state.drawerType === 'components'}>
                <label><b>Material Components</b></label>
                <a each={ el in state.routes.components } href={ el.href }>{el.name}</a>
            </template>
            <template if={state.drawerType === 'examples'}>
                <label><b>RiotJS Examples</b></label>
                <a>Routing</a>
                <a>Mitt Events</a>
                <a>Meiosis</a>
                <a>Native Web Components</a>
            </template>
        </nav>
    </dialog>

    <script>
        import routes from './routes.js'
        import { Router, Route } from '@riotjs/route'
        import pHome from "./p-home.riot";

        export default {
            components: {
                pHome,
                Router,
                Route,
            },
            state: {
                routes,
                drawer: false,
                drawerType: '',
            },
            showDrawer(type) {
                this.update({ drawer: true, ...(typeof type === 'string' && type.length > 0 ? { drawerType: type } : {}) });
            },
            hideDrawer() {
                this.update({ drawer: false });
            }
        }
    </script>
    <style>
    </style>
</index-riot>